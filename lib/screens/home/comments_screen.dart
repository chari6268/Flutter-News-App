import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:news_app/models/comment_model.dart';
import 'package:news_app/providers/auth_provider.dart';
import 'package:news_app/providers/news_provider.dart';
import 'package:intl/intl.dart';

class CommentsScreen extends StatefulWidget {
  final String newsId;

  const CommentsScreen({
    Key? key,
    required this.newsId,
  }) : super(key: key);

  @override
  _CommentsScreenState createState() => _CommentsScreenState();
}

class _CommentsScreenState extends State<CommentsScreen> {
  final TextEditingController _commentController = TextEditingController();
  bool _isLoading = true;
  List<CommentModel> _comments = [];
  List<String> _mentionSuggestions = [];
  bool _showMentionSuggestions = false;
  int _currentMentionStart = -1;

  @override
  void initState() {
    super.initState();
    _loadComments();
  }

  Future<void> _loadComments() async {
    final newsProvider = Provider.of<NewsProvider>(context, listen: false);
    
    setState(() {
      _isLoading = true;
    });

    try {
      List<CommentModel> comments = await newsProvider.getComments(widget.newsId);
      
      setState(() {
        _comments = comments;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading comments: $e')),
      );
    }
  }

  void _checkForMention(String value) {
    // Find the last @ symbol
    int lastAtIndex = value.lastIndexOf('@');
    
    if (lastAtIndex != -1 && (lastAtIndex == 0 || value[lastAtIndex - 1] == ' ')) {
      String query = value.substring(lastAtIndex + 1);
      
      // If we're not at the end and the next character is a space, don't show suggestions
      if (lastAtIndex + query.length + 1 < value.length && 
          value[lastAtIndex + query.length + 1] == ' ') {
        setState(() {
          _showMentionSuggestions = false;
        });
        return;
      }
      
      setState(() {
        _currentMentionStart = lastAtIndex;
        _showMentionSuggestions = true;
        // TODO: In a real app, you would fetch users matching the query
        _mentionSuggestions = [
          'john_doe',
          'jane_smith',
          'robert_johnson',
          'jennifer_williams',
        ].where((name) => name.toLowerCase().contains(query.toLowerCase())).toList();
      });
    } else {
      setState(() {
        _showMentionSuggestions = false;
      });
    }
  }

  void _selectMention(String username) {
    if (_currentMentionStart != -1) {
      String before = _commentController.text.substring(0, _currentMentionStart + 1);
      String after = _commentController.text.substring(_commentController.selection.baseOffset);
      
      _commentController.text = '$before$username $after';
      _commentController.selection = TextSelection.collapsed(
        offset: _currentMentionStart + username.length + 2,
      );
      
      setState(() {
        _showMentionSuggestions = false;
      });
    }
  }

  Future<void> _submitComment() async {
    if (_commentController.text.trim().isEmpty) return;
    
    final newsProvider = Provider.of<NewsProvider>(context, listen: false);
    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    
    if (authProvider.currentUser == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please login to comment')),
      );
      return;
    }
    
    try {
      // Extract mentions
      RegExp mentionRegex = RegExp(r'@(\w+)');
      List<String> mentions = [];
      
      mentionRegex.allMatches(_commentController.text).forEach((match) {
        mentions.add(match.group(1)!);
      });
      
      final comment = CommentModel(
        id: '', // Will be generated by firestore
        newsId: widget.newsId,
        userId: authProvider.currentUser!.id,
        userName: authProvider.currentUser!.name,
        content: _commentController.text,
        timestamp: DateTime.now(),
        mentions: mentions,
      );
      
      await newsProvider.addComment(comment);
      _commentController.clear();
      await _loadComments();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error submitting comment: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Comments'),
      ),
      body: Column(
        children: [
          Expanded(
            child: _isLoading
                ? Center(child: CircularProgressIndicator())
                : _comments.isEmpty
                    ? Center(child: Text('No comments yet'))
                    : ListView.builder(
                        itemCount: _comments.length,
                        padding: EdgeInsets.all(8),
                        itemBuilder: (context, index) {
                          final comment = _comments[index];
                          return Card(
                            margin: EdgeInsets.symmetric(vertical: 4),
                            child: Padding(
                              padding: const EdgeInsets.all(12.0),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                    children: [
                                      Text(
                                        comment.userName,
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                      Text(
                                        DateFormat('MMM d, yyyy â€¢ h:mm a').format(comment.timestamp),
                                        style: TextStyle(
                                          color: Colors.grey,
                                          fontSize: 12,
                                        ),
                                      ),
                                    ],
                                  ),
                                  SizedBox(height: 8),
                                  Text(comment.content),
                                ],
                              ),
                            ),
                          );
                        },
                      ),
          ),
          // Mention suggestions
          if (_showMentionSuggestions && _mentionSuggestions.isNotEmpty)
            Container(
              height: min(150, _mentionSuggestions.length * 50.0),
              color: Colors.grey.shade100,
              child: ListView.builder(
                itemCount: _mentionSuggestions.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    leading: CircleAvatar(
                      child: Text(_mentionSuggestions[index][0].toUpperCase()),
                    ),
                    title: Text(_mentionSuggestions[index]),
                    onTap: () => _selectMention(_mentionSuggestions[index]),
                  );
                },
              ),
            ),
          // Comment input
          Container(
            padding: EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.shade300,
                  blurRadius: 4,
                  offset: Offset(0, -2),
                ),
              ],
            ),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _commentController,
                    decoration: InputDecoration(
                      hintText: 'Add a comment...',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(24),
                        borderSide: BorderSide.none,
                      ),
                      filled: true,
                      fillColor: Colors.grey.shade100,
                      contentPadding: EdgeInsets.symmetric(horizontal: 16),
                    ),
                    onChanged: _checkForMention,
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.send),
                  color: Theme.of(context).primaryColor,
                  onPressed: _submitComment,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  
  int min(int a, int b) => a < b ? a : b;
}